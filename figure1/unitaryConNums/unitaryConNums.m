% The code here should generate and save figure 1 panel G
%  It requires tracing data files located in
% the home directory in a folder called "tracing". This data can be
% downloaded at: 
% it also relies on the
% package JSONLab: https://www.mathworks.com/matlabcentral/fileexchange/33381-jsonlab--a-toolbox-to-encode-decode-json-files



%% Load annotations and connectors

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

ORNs=[ORNs_Left, ORNs_Right];

%return all skeleton IDs of DM6 PNs
PNs=sort(annotations.DM6_0x20_PN);


% return all skel IDs with *LN* in fieldname
Fn = fieldnames(annotations);
selFn = Fn(~cellfun(@isempty,regexp(Fn,'LN')));

LNs=[];
for i = 1:numel(selFn)
    LNs=[LNs, annotations.(selFn{i})];
end

LNs = unique(LNs);

%Load the connector structure
load('~/tracing/conns.mat')

%gen conn fieldname list
connFields=fieldnames(conns);

%% Determine the number of contacts between all pairs of categorized neurons

%***NOTE*** This should probably be broken out of this script and saved as
%a seperate file

% order leftPNs1-3: 1,2,5 and right PNs1-2: 4,3  % 151230 WCL corresponded to catmaid2

%Find contact numbers for connections where ORNs are presynaptic to ORNs
%and PNs

% ORN--> PN
% ORN--> ORN

%Loop over ORNs

for o=1:length(ORNs)
    tic 
    % get contact number between each ORN and each PN
    %loop over PNs
    for p=1:length(PNs)
        
        ornToPn(o,p)=getSynapseNum(ORNs(o),PNs(p));
    end
  
    % get contact number between each ORN and each ORN
    %loop over ORNs
    for orn=1:length(ORNs)
        
        ornToOrn(o,orn)=getSynapseNum(ORNs(o),ORNs(orn));
    end
    toc
end

save('ornToPn','ornToPn')
save('ornToOrn','ornToOrn')

%Find contact numbers for connections where PNs are presynaptic to ORNs and
%PNs

% PN--> PN
% PN--> ORN

%Loop over PNs


for o=1:length(PNs)
    tic
    
    % get contact number between each PN and each PN
    %loop over PNs
    for p=1:length(PNs)
        
        pnToPn(o,p)=getSynapseNum(PNs(o),PNs(p));
    end
   
    
    % get contact number between each PN and each ORN
    %loop over ORNs
    for orn=1:length(ORNs)
        
        pnToOrn(o,orn)=getSynapseNum(PNs(o),ORNs(orn));
    end
    toc
end

save('pnToPn','pnToPn')
save('pnToOrn','pnToOrn')


%% Plotting

load('~/Documents/MATLAB/tracingCode2/wfly1_Manuscript_Archive16March2016/ornToPn.mat')
load('~/Documents/MATLAB/tracingCode2/wfly1_Manuscript_Archive16March2016/ornToOrn.mat')


load('~/Documents/MATLAB/tracingCode2/wfly1_Manuscript_Archive16March2016/pnToPn.mat')
load('~/Documents/MATLAB/tracingCode2/wfly1_Manuscript_Archive16March2016/pnToOrn.mat')


%% Plotting for ORN and PN connections only

figure()
set(gcf,'color','w')

%Store ipsi/contra orn-to-pn connection synapse numbers seperately
oToPUnitaries_ipsi=[reshape(ornsToPn(1:27,[1,2,5]),numel(ornsToPn(1:27,[1,2,5])),1);...
    reshape(ornsToPn(28:end,[3,4]),numel(ornsToPn(28:end,[3,4])),1)];

oToPUnitaries_contra=[reshape(ornsToPn(1:27,[3,4]),numel(ornsToPn(1:27,[3,4])),1);...
    reshape(ornsToPn(28:end,[1,2,5]),numel(ornsToPn(28:end,[1,2,5])),1)];

%remove zeros associated w/ the unilateral orns
oToPUnitaries_contra=oToPUnitaries_contra(oToPUnitaries_contra~=0);

%Store all other synapse numbers in a cell array, excluding zeros
ornPnUnitaries{1}=pnToPn(find(pnToPn>0));
ornPnUnitaries{2}=pnToOrn(find(pnToOrn>0));
ornPnUnitaries{3}=ornsToOrn(find(ornsToOrn>0));

%Plot orn-to-pn counts
jitterAmount = 0.25;
jitterValuesX = 2*(rand(1,length([oToPUnitaries_ipsi]))-0.5)*jitterAmount;   %
scatter(ones(1,length(oToPUnitaries_ipsi))+jitterValuesX,oToPUnitaries_ipsi,...
    60,'k') %,[],'k')
hold on

jitterAmount = 0.25;
jitterValuesX = 2*(rand(1,length([oToPUnitaries_contra]))-0.5)*jitterAmount;   %
scatter(ones(1,length(oToPUnitaries_contra))+jitterValuesX,oToPUnitaries_contra,...
    60,'k', 'filled')

for t=1:3

jitterAmount = 0.25;
jitterValuesX = 2*(rand(1,length(ornPnUnitaries{t}))-0.5)*jitterAmount;   % +/-jitterAmount max

scatter((t+1)*ones(1,length(ornPnUnitaries{t}))+jitterValuesX, ornPnUnitaries{t},...
    60, 'k') %,[],'k')

hold on

end

ax=gca;
% ylabel('Connections per unitary (3 conn thresh)')
ylabel('Synapses per unitary connection')
ax.XLim=[0 5];
ax.YLim=[0 60];
ax.XTick=[1:4];
ax.XTickLabel={'ORN-->PN','PN-->PN','PN-->ORN','ORN-->ORN'};
ax.FontSize=18;

saveas(gcf,'uniConNums')
saveas(gcf,'uniConNums','epsc')
