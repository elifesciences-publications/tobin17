%% Adjacency matrix Figure1-fig supp 4

% Load annotations and connectors

% Load annotations json. Generated by Wei's code gen_annotation_map.py
annotations=loadjson('~/tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs

ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;

ORNs=[ORNs_Left, ORNs_Right];

% return all skeleton IDs of DM6 PNs
PNs=sort(annotations.DM6_0x20_PN);

% specifying PNs by hand here
PNs_Left = PNs([1,2,5]); % should be ordered PN1, PN2, PN3 LS
PNs_Right = PNs([4,3]); % should be ordered PN1, PN2 LS

%Load the connector structure
load('~/tracing/conns.mat')

%gen conn fieldname list
connFields=fieldnames(conns);

%% load adjacency pulled from catmaid via 
% ~/Dropbox/htem_team/code/networkAnalysis/users/wclee/wfly1/jsonparsertest.py

load('adjacency.mat');
load('skeletons.mat');
load('somalist.mat');

% Reordering matrix
n=length(skeletons);

% [~,iol] = intersect(skeletons,ORNs_Left);
% [~,ior] = intersect(skeletons,ORNs_Right);
% [~,ipl] = intersect(skeletons,PNs_Left);
% [~,ipr] = intersect(skeletons,PNs_Right);

% ordering
% skelReOrd = [ORNs_Left, ORNs_Right, PNs_Left, PNs_Right]';
skelReOrd = [PNs_Left, PNs_Right, ORNs_Left, ORNs_Right]';

% swapping unilateral ORNs indexes
skelReOrd([33,53]) = skelReOrd([53,33]);
skelReOrd([6,8]) = skelReOrd([8,6]);

[~,ia,ib] = intersect(skeletons,skelReOrd);

tempAr(:,ib) = adjacency(:,ia);

adjReOrd(ib,:) = tempAr(ia,:);

%% Figure
figure;h = pcolor(adjReOrd);
set(h, 'EdgeColor', 'none');

% needed to manually use colormapeditor
% colormap(hot(max(adjReOrd(:))));
% colormap(parula(max(adjacency(:))+1));
colormap(flipud(parula(max(adjacency(:))+1)));
colorbar('location','EastOutside');
title('ORN-PN Connectivity Matrix')
set(h, 'EdgeColor', 'none');
%view([90 90]); % rotate 90 deg
    
axis square
set(gcf,'renderer','painters');
colormapeditor

