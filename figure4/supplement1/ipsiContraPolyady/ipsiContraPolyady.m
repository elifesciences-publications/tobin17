%% This script generates Figure 4â€“figure supplement 1 panel E
%
% The goal of this code is to generate a figure showing mean divergence,
% polyady, of ipsi and contra output synapses

%% Load annotations and connectors

% Load annotations json. Generated by gen_annotation_map.py
annotations=loadjson('../../../tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs
ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;
ORNs=[ORNs_Left, ORNs_Right];

% return all skeleton IDs of DM6 PNs
PNs=sort(annotations.DM6_0x20_PN);

% Load the connector structure
load('../../../tracing/conns.mat')


%% Collect conn nums 

load('../../../data/ipsiContraPolyady/rightPostSkelsBySyn')
load('../../../data/ipsiContraPolyady/leftPostSkelsBySyn')


% For each ORN collect its total number of connections within each
% glomerulus as well as the total number of PN connections

leftCounter=1;
rightCounter=1;

for o=1:length(ORNs)
    
    leftRunT=[];
    leftRunP=[];
    leftRunDiv=[];
   
    
    
    for j=1:size(leftPostSkelsBySyn{o},2)
        
        leftRunT=[leftRunT, leftPostSkelsBySyn{o}{j}];
        leftRunP=[leftRunP,leftPostSkelsBySyn{o}{j}(ismember(leftPostSkelsBySyn{o}{j},PNs))];
        leftRunDiv=[leftRunDiv,numel(leftPostSkelsBySyn{o}{j})];
    end
    
    if isempty(leftRunP)==1
        
    else
        
        leftTotCon(leftCounter)=numel(leftRunT);
        leftPNCon(leftCounter)=numel(leftRunP);
        leftMeanDivergence(leftCounter)=mean(leftRunDiv);
        leftDivergence{o}=leftRunDiv;
        leftCounter=leftCounter+1;
        
    end
    
    rightRunT=[];
    rightRunP=[];
    rightRunDiv=[];
   
    
    
    for j=1:size(rightPostSkelsBySyn{o},2)
        
        rightRunT=[rightRunT, rightPostSkelsBySyn{o}{j}];
        rightRunP=[rightRunP,rightPostSkelsBySyn{o}{j}(ismember(rightPostSkelsBySyn{o}{j},PNs))];
        rightRunDiv=[rightRunDiv,numel(rightPostSkelsBySyn{o}{j})];
    end
    
    if isempty(rightRunP)==1
        
    else
        
        rightTotCon(rightCounter)=numel(rightRunT);
        rightPNCon(rightCounter)=numel(rightRunP);
        rightMeanDivergence(rightCounter)=mean(rightRunDiv);
        rightDivergence{o}=rightRunDiv;
        rightCounter=rightCounter+1;
        
    end
end


%% plotting

figure()
set(gcf, 'Color', 'w')

h=boxplot( [leftMeanDivergence(1:27),rightMeanDivergence(27:end),...
    leftMeanDivergence(28:end),rightMeanDivergence(1:26)]', [ones(53,1); 2*ones(51,1)],...
    'Color', 'k', 'Notch','on');
ax=gca;
ax.XTickLabel={'ipsi','contra'};
ylabel('Synaptic Divergence (edges/tbar)', 'Fontsize',16)
ylim([0 5])
ax.YTick=[0:1:5];
ax.FontSize=16;
axis square

saveas(gcf,'ipsiContraPolyady')
saveas(gcf,'ipsiContraPolyady','epsc')


%% Permutation test
nPerm = 10000;

% synaptic divergence (polyady) p < 0.0001, 10000 perms
sa = [leftMeanDivergence(1:27),rightMeanDivergence(27:end)]';
sb = [leftMeanDivergence(28:end),rightMeanDivergence(1:26)]';

sh0 = [sa; sb];

m = length(sa); 
n = length(sb); 

d_empirical = mean(sa) - mean(sb);

sa_rand = zeros(m,nPerm);
sb_rand = zeros(n,nPerm);
tic
for ii = 1:nPerm
    sa_rand(:,ii) = randsample(sh0,m);%,true);
    sb_rand(:,ii) = randsample(sh0,n);%,true);
end
toc
% Now we compute the differences between the means of these resampled
% samples.
% d = median(sb_rand) - median(sa_rand);
d = mean(sa_rand) - mean(sb_rand);

%
figure;
% [nn,xx] = hist(d,100);
% bar(xx,nn/sum(nn))
histogram(d,'Normalization','probability')
ylabel('Probability of occurrence')
xlabel('Difference between means')
hold on
%

y = get(gca,'yLim'); % y(2) is the maximum value on the y-axis.
x = get(gca,'xLim'); % x(1) is the minimum value on the x-axis.
plot([d_empirical,d_empirical],y*.99,'r-','lineWidth',2)

% Probability of H0 being true = 
% (# randomly obtained values > observed value)/total number of simulations
p = sum(abs(d) > abs(d_empirical))/length(d);
text(x(1)+(.01*(abs(x(1))+abs(x(2)))),y(2)*.95,sprintf('H0 is true with %4.4f probability.',p))