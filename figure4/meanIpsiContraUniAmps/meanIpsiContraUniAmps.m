% The purpose of this code is to generate a connected scatter plot of mean
% uEPSP amplitudes for ipsi and Contra ORN inputs to each PN 
%
% This code relies on the product of pulluEPSPs
%
% This code should generate figure 4 panel D

%% Load annotations and connectors

% Load annotations json. Generated by gen_annotation_map.py
annotations=loadjson('../../tracing/sid_by_annotation.json');

% Return all skeleton IDs for R and L ORNs
ORNs_Left=annotations.Left_0x20_ORN;
ORNs_Right=annotations.Right_0x20_ORN;
ORNs=[ORNs_Left, ORNs_Right];
            
%return all skeleton IDs of DM6 PNs
PNs=sort(annotations.DM6_0x20_PN);

%Load the connector structure
load('../../tracing/conns.mat')

%Base dir for simulation results
baseDir='../../nC_projects_lite/';

%%

% Collect the amplitude of ipsi and contra uEPSPs for R and L ORN-->PN
% pairs

 rightCounter=1;
 
for p = 1:5
    
   
    
    if p<=3
        
        for o=1:size(leftUEPSPs{p},1)
            
            leftPNIpsiAmps(p,o)=max(leftUEPSPs{p}(o,:))-mean(leftUEPSPs{p}(o,1:100));
            
        end
        
        for o=1:size(rightUEPSPs{p},1)
            
            leftPNContraAmps(p,o)=max(rightUEPSPs{p}(o,:))-mean(rightUEPSPs{p}(o,1:100));
            
        end
        
    else
        
        for o=1:size(leftUEPSPs{p},1)
            
            rightPNContraAmps(rightCounter,o)=max(leftUEPSPs{p}(o,:))-mean(leftUEPSPs{p}(o,1:100));
            
        end
        
        for o=1:size(rightUEPSPs{p},1)
            
            rightPNIpsiAmps(rightCounter,o)=max(rightUEPSPs{p}(o,:))-mean(rightUEPSPs{p}(o,1:100));
            
        end
        
        rightCounter=rightCounter+1;
        
    end
    
     
    
end


%% Plotting

figure()
set(gcf,'Color','w')

rightCounter=1;

for p=1:5
    
    
    
    if p<=3
        
        scatter([1 2],[mean(leftPNIpsiAmps(p,:)) mean(leftPNContraAmps(p,:))]...
            ,54,'Filled' ,'k')
        line([1 2 ], [mean(leftPNIpsiAmps(p,:)) mean(leftPNContraAmps(p,:))]...
            ,'Color', 'k', 'LineWidth',1)
        hold on
        
        uniMeans(p,1)=mean(leftPNIpsiAmps(p,:));
        uniMeans(p,2)=mean(leftPNContraAmps(p,:));
        
    else
        scatter([1 2],[mean(rightPNIpsiAmps(rightCounter,:)) mean(rightPNContraAmps(rightCounter,:))]...
            ,54, 'Filled','k')
        line([1 2 ], [mean(rightPNIpsiAmps(rightCounter,:)) mean(rightPNContraAmps(rightCounter,:))]...
            ,'Color', 'k', 'LineWidth',1)
        
        
        
        uniMeans(p,1)=mean(rightPNIpsiAmps(rightCounter,:));
        uniMeans(p,2)=mean(rightPNContraAmps(rightCounter,:));
        
        rightCounter=rightCounter+1;
    end
    
    
end

xlim([0.5 2.5])
ylim([4 6.5])

ax=gca;
ax.XTick=[1,2];
ax.XTickLabel={'Ipsi','Contra'};
ax.FontSize=16;
ax.YTick=[4:1.25:6.5];
ax.TickDir='out';
ax.LineWidth=1;
pbaspect([1 1.65 1])

ylabel('mean uEPSP Amplitude (mV)');

saveas(gcf,'meanIpsiContraUniAmps');
saveas(gcf,'meanIpsiContraUniAmps', 'epsc');

%% Stats

[h,p]=ttest(uniMeans(:,1),uniMeans(:,2))
